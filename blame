ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700    1) /*
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700    2)  *  linux/fs/ext4/resize.c
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700    3)  *
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700    4)  * Support for resizing an ext4 filesystem while it is mounted.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700    5)  *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700    6)  * Copyright (C) 2001, 2002 Andreas Dilger <adilger@clusterfs.com>
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700    7)  *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700    8)  * This could probably be made into a module, because it is not often in use.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700    9)  */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   10) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   11) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   12) #define EXT4FS_DEBUG
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   13) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   14) #include <linux/errno.h>
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   15) #include <linux/slab.h>
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   16) 
3dcf54515aa4 (Christoph Hellwig 2008-04-29 18:13:32 -0400   17) #include "ext4_jbd2.h"
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   18) 
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   19) int ext4_resize_begin(struct super_block *sb)
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   20) {
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   21) 	int ret = 0;
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   22) 
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   23) 	if (!capable(CAP_SYS_RESOURCE))
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   24) 		return -EPERM;
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   25) 
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   26) 	/*
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   27) 	 * We are not allowed to do online-resizing on a filesystem mounted
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   28) 	 * with error, because it can destroy the filesystem easily.
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   29) 	 */
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   30) 	if (EXT4_SB(sb)->s_mount_state & EXT4_ERROR_FS) {
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   31) 		ext4_warning(sb, "There are errors in the filesystem, "
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   32) 			     "so online resizing is not allowed\n");
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   33) 		return -EPERM;
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   34) 	}
ce723c31b58f (Yongqiang Yang    2011-07-26 21:39:09 -0400   35) 
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   36) 	if (test_and_set_bit_lock(EXT4_RESIZING, &EXT4_SB(sb)->s_resize_flags))
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   37) 		ret = -EBUSY;
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   38) 
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   39) 	return ret;
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   40) }
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   41) 
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   42) void ext4_resize_end(struct super_block *sb)
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   43) {
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   44) 	clear_bit_unlock(EXT4_RESIZING, &EXT4_SB(sb)->s_resize_flags);
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   45) 	smp_mb__after_clear_bit();
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   46) }
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400   47) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   48) #define outside(b, first, last)	((b) < (first) || (b) >= (last))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   49) #define inside(b, first, last)	((b) >= (first) && (b) < (last))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   50) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   51) static int verify_group_input(struct super_block *sb,
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   52) 			      struct ext4_new_group_data *input)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   53) {
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   54) 	struct ext4_sb_info *sbi = EXT4_SB(sb);
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   55) 	struct ext4_super_block *es = sbi->s_es;
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700   56) 	ext4_fsblk_t start = ext4_blocks_count(es);
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   57) 	ext4_fsblk_t end = start + input->blocks_count;
fd2d42912f9f (Avantika Mathur   2008-01-28 23:58:27 -0500   58) 	ext4_group_t group = input->group;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   59) 	ext4_fsblk_t itend = input->inode_table + sbi->s_itb_per_group;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   60) 	unsigned overhead = ext4_bg_has_super(sb, group) ?
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   61) 		(1 + ext4_bg_num_gdb(sb, group) +
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   62) 		 le16_to_cpu(es->s_reserved_gdt_blocks)) : 0;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   63) 	ext4_fsblk_t metaend = start + overhead;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   64) 	struct buffer_head *bh = NULL;
3a5b2ecdd1fa (Mingming Cao      2006-10-11 01:21:05 -0700   65) 	ext4_grpblk_t free_blocks_count, offset;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   66) 	int err = -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   67) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   68) 	input->free_blocks_count = free_blocks_count =
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   69) 		input->blocks_count - 2 - overhead - sbi->s_itb_per_group;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   70) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   71) 	if (test_opt(sb, DEBUG))
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   72) 		printk(KERN_DEBUG "EXT4-fs: adding %s group %u: %u blocks "
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   73) 		       "(%d free, %u reserved)\n",
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700   74) 		       ext4_bg_has_super(sb, input->group) ? "normal" :
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   75) 		       "no-super", input->group, input->blocks_count,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   76) 		       free_blocks_count, input->reserved_blocks);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   77) 
3a5b2ecdd1fa (Mingming Cao      2006-10-11 01:21:05 -0700   78) 	ext4_get_group_no_and_offset(sb, start, NULL, &offset);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   79) 	if (group != sbi->s_groups_count)
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500   80) 		ext4_warning(sb, "Cannot add at group %u (only %u groups)",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   81) 			     input->group, sbi->s_groups_count);
3a5b2ecdd1fa (Mingming Cao      2006-10-11 01:21:05 -0700   82) 	else if (offset != 0)
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500   83) 			ext4_warning(sb, "Last group not full");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   84) 	else if (input->reserved_blocks > input->blocks_count / 5)
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500   85) 		ext4_warning(sb, "Reserved blocks too high (%u)",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   86) 			     input->reserved_blocks);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   87) 	else if (free_blocks_count < 0)
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500   88) 		ext4_warning(sb, "Bad blocks count %u",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   89) 			     input->blocks_count);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   90) 	else if (!(bh = sb_bread(sb, end - 1)))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500   91) 		ext4_warning(sb, "Cannot read last block (%llu)",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   92) 			     end - 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   93) 	else if (outside(input->block_bitmap, start, end))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500   94) 		ext4_warning(sb, "Block bitmap not in group (block %llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700   95) 			     (unsigned long long)input->block_bitmap);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   96) 	else if (outside(input->inode_bitmap, start, end))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500   97) 		ext4_warning(sb, "Inode bitmap not in group (block %llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700   98) 			     (unsigned long long)input->inode_bitmap);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700   99) 	else if (outside(input->inode_table, start, end) ||
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400  100) 		 outside(itend - 1, start, end))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  101) 		ext4_warning(sb, "Inode table not in group (blocks %llu-%llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  102) 			     (unsigned long long)input->inode_table, itend - 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  103) 	else if (input->inode_bitmap == input->block_bitmap)
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  104) 		ext4_warning(sb, "Block bitmap same as inode bitmap (%llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  105) 			     (unsigned long long)input->block_bitmap);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  106) 	else if (inside(input->block_bitmap, input->inode_table, itend))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  107) 		ext4_warning(sb, "Block bitmap (%llu) in inode table "
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  108) 			     "(%llu-%llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  109) 			     (unsigned long long)input->block_bitmap,
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  110) 			     (unsigned long long)input->inode_table, itend - 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  111) 	else if (inside(input->inode_bitmap, input->inode_table, itend))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  112) 		ext4_warning(sb, "Inode bitmap (%llu) in inode table "
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  113) 			     "(%llu-%llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  114) 			     (unsigned long long)input->inode_bitmap,
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  115) 			     (unsigned long long)input->inode_table, itend - 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  116) 	else if (inside(input->block_bitmap, start, metaend))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  117) 		ext4_warning(sb, "Block bitmap (%llu) in GDT table (%llu-%llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  118) 			     (unsigned long long)input->block_bitmap,
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  119) 			     start, metaend - 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  120) 	else if (inside(input->inode_bitmap, start, metaend))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  121) 		ext4_warning(sb, "Inode bitmap (%llu) in GDT table (%llu-%llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  122) 			     (unsigned long long)input->inode_bitmap,
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  123) 			     start, metaend - 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  124) 	else if (inside(input->inode_table, start, metaend) ||
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400  125) 		 inside(itend - 1, start, metaend))
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  126) 		ext4_warning(sb, "Inode table (%llu-%llu) overlaps GDT table "
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  127) 			     "(%llu-%llu)",
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  128) 			     (unsigned long long)input->inode_table,
1939e49a0cb9 (Randy Dunlap      2006-10-28 10:38:26 -0700  129) 			     itend - 1, start, metaend - 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  130) 	else
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  131) 		err = 0;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  132) 	brelse(bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  133) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  134) 	return err;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  135) }
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  136) 
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  137) /*
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  138)  * ext4_new_flex_group_data is used by 64bit-resize interface to add a flex
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  139)  * group each time.
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  140)  */
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  141) struct ext4_new_flex_group_data {
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  142) 	struct ext4_new_group_data *groups;	/* new_group_data for groups
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  143) 						   in the flex group */
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  144) 	__u16 *bg_flags;			/* block group flags of groups
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  145) 						   in @groups */
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  146) 	ext4_group_t count;			/* number of groups in @groups
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  147) 						 */
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  148) };
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  149) 
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  150) /*
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  151)  * alloc_flex_gd() allocates a ext4_new_flex_group_data with size of
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  152)  * @flexbg_size.
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  153)  *
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  154)  * Returns NULL on failure otherwise address of the allocated structure.
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  155)  */
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  156) static struct ext4_new_flex_group_data *alloc_flex_gd(unsigned long flexbg_size)
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  157) {
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  158) 	struct ext4_new_flex_group_data *flex_gd;
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  159) 
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  160) 	flex_gd = kmalloc(sizeof(*flex_gd), GFP_NOFS);
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  161) 	if (flex_gd == NULL)
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  162) 		goto out3;
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  163) 
d1094356296c (Haogang Chen      2012-05-28 14:21:55 -0400  164) 	if (flexbg_size >= UINT_MAX / sizeof(struct ext4_new_flex_group_data))
d1094356296c (Haogang Chen      2012-05-28 14:21:55 -0400  165) 		goto out2;
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  166) 	flex_gd->count = flexbg_size;
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  167) 
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  168) 	flex_gd->groups = kmalloc(sizeof(struct ext4_new_group_data) *
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  169) 				  flexbg_size, GFP_NOFS);
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  170) 	if (flex_gd->groups == NULL)
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  171) 		goto out2;
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  172) 
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  173) 	flex_gd->bg_flags = kmalloc(flexbg_size * sizeof(__u16), GFP_NOFS);
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  174) 	if (flex_gd->bg_flags == NULL)
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  175) 		goto out1;
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  176) 
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  177) 	return flex_gd;
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  178) 
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  179) out1:
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  180) 	kfree(flex_gd->groups);
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  181) out2:
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  182) 	kfree(flex_gd);
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  183) out3:
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  184) 	return NULL;
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  185) }
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  186) 
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  187) static void free_flex_gd(struct ext4_new_flex_group_data *flex_gd)
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  188) {
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  189) 	kfree(flex_gd->bg_flags);
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  190) 	kfree(flex_gd->groups);
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  191) 	kfree(flex_gd);
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  192) }
28c7bac00916 (Yongqiang Yang    2012-01-03 23:22:50 -0500  193) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  194) /*
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  195)  * ext4_alloc_group_tables() allocates block bitmaps, inode bitmaps
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  196)  * and inode tables for a flex group.
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  197)  *
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  198)  * This function is used by 64bit-resize.  Note that this function allocates
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  199)  * group tables from the 1st group of groups contained by @flexgd, which may
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  200)  * be a partial of a flex group.
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  201)  *
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  202)  * @sb: super block of fs to which the groups belongs
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  203)  */
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  204) static void ext4_alloc_group_tables(struct super_block *sb,
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  205) 				struct ext4_new_flex_group_data *flex_gd,
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  206) 				int flexbg_size)
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  207) {
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  208) 	struct ext4_new_group_data *group_data = flex_gd->groups;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  209) 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  210) 	ext4_fsblk_t start_blk;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  211) 	ext4_fsblk_t last_blk;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  212) 	ext4_group_t src_group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  213) 	ext4_group_t bb_index = 0;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  214) 	ext4_group_t ib_index = 0;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  215) 	ext4_group_t it_index = 0;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  216) 	ext4_group_t group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  217) 	ext4_group_t last_group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  218) 	unsigned overhead;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  219) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  220) 	BUG_ON(flex_gd->count == 0 || group_data == NULL);
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  221) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  222) 	src_group = group_data[0].group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  223) 	last_group  = src_group + flex_gd->count - 1;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  224) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  225) 	BUG_ON((flexbg_size > 1) && ((src_group & ~(flexbg_size - 1)) !=
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  226) 	       (last_group & ~(flexbg_size - 1))));
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  227) next_group:
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  228) 	group = group_data[0].group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  229) 	start_blk = ext4_group_first_block_no(sb, src_group);
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  230) 	last_blk = start_blk + group_data[src_group - group].blocks_count;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  231) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  232) 	overhead = ext4_bg_has_super(sb, src_group) ?
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  233) 		   (1 + ext4_bg_num_gdb(sb, src_group) +
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  234) 		    le16_to_cpu(es->s_reserved_gdt_blocks)) : 0;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  235) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  236) 	start_blk += overhead;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  237) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  238) 	BUG_ON(src_group >= group_data[0].group + flex_gd->count);
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  239) 	/* We collect contiguous blocks as much as possible. */
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  240) 	src_group++;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  241) 	for (; src_group <= last_group; src_group++)
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  242) 		if (!ext4_bg_has_super(sb, src_group))
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  243) 			last_blk += group_data[src_group - group].blocks_count;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  244) 		else
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  245) 			break;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  246) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  247) 	/* Allocate block bitmaps */
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  248) 	for (; bb_index < flex_gd->count; bb_index++) {
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  249) 		if (start_blk >= last_blk)
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  250) 			goto next_group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  251) 		group_data[bb_index].block_bitmap = start_blk++;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  252) 		ext4_get_group_no_and_offset(sb, start_blk - 1, &group, NULL);
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  253) 		group -= group_data[0].group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  254) 		group_data[group].free_blocks_count--;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  255) 		if (flexbg_size > 1)
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  256) 			flex_gd->bg_flags[group] &= ~EXT4_BG_BLOCK_UNINIT;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  257) 	}
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  258) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  259) 	/* Allocate inode bitmaps */
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  260) 	for (; ib_index < flex_gd->count; ib_index++) {
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  261) 		if (start_blk >= last_blk)
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  262) 			goto next_group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  263) 		group_data[ib_index].inode_bitmap = start_blk++;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  264) 		ext4_get_group_no_and_offset(sb, start_blk - 1, &group, NULL);
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  265) 		group -= group_data[0].group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  266) 		group_data[group].free_blocks_count--;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  267) 		if (flexbg_size > 1)
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  268) 			flex_gd->bg_flags[group] &= ~EXT4_BG_BLOCK_UNINIT;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  269) 	}
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  270) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  271) 	/* Allocate inode tables */
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  272) 	for (; it_index < flex_gd->count; it_index++) {
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  273) 		if (start_blk + EXT4_SB(sb)->s_itb_per_group > last_blk)
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  274) 			goto next_group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  275) 		group_data[it_index].inode_table = start_blk;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  276) 		ext4_get_group_no_and_offset(sb, start_blk, &group, NULL);
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  277) 		group -= group_data[0].group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  278) 		group_data[group].free_blocks_count -=
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  279) 					EXT4_SB(sb)->s_itb_per_group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  280) 		if (flexbg_size > 1)
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  281) 			flex_gd->bg_flags[group] &= ~EXT4_BG_BLOCK_UNINIT;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  282) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  283) 		start_blk += EXT4_SB(sb)->s_itb_per_group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  284) 	}
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  285) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  286) 	if (test_opt(sb, DEBUG)) {
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  287) 		int i;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  288) 		group = group_data[0].group;
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  289) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  290) 		printk(KERN_DEBUG "EXT4-fs: adding a flex group with "
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  291) 		       "%d groups, flexbg size is %d:\n", flex_gd->count,
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  292) 		       flexbg_size);
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  293) 
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  294) 		for (i = 0; i < flex_gd->count; i++) {
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  295) 			printk(KERN_DEBUG "adding %s group %u: %u "
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  296) 			       "blocks (%d free)\n",
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  297) 			       ext4_bg_has_super(sb, group + i) ? "normal" :
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  298) 			       "no-super", group + i,
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  299) 			       group_data[i].blocks_count,
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  300) 			       group_data[i].free_blocks_count);
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  301) 		}
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  302) 	}
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  303) }
3fbea4b3683a (Yongqiang Yang    2012-01-03 23:44:38 -0500  304) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  305) static struct buffer_head *bclean(handle_t *handle, struct super_block *sb,
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  306) 				  ext4_fsblk_t blk)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  307) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  308) 	struct buffer_head *bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  309) 	int err;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  310) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  311) 	bh = sb_getblk(sb, blk);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  312) 	if (!bh)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  313) 		return ERR_PTR(-EIO);
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  314) 	if ((err = ext4_journal_get_write_access(handle, bh))) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  315) 		brelse(bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  316) 		bh = ERR_PTR(err);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  317) 	} else {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  318) 		memset(bh->b_data, 0, sb->s_blocksize);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  319) 		set_buffer_uptodate(bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  320) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  321) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  322) 	return bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  323) }
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  324) 
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  325) /*
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  326)  * If we have fewer than thresh credits, extend by EXT4_MAX_TRANS_DATA.
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  327)  * If that fails, restart the transaction & regain write access for the
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  328)  * buffer head which is used for block_bitmap modifications.
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  329)  */
6d40bc5a7e8f (Yongqiang Yang    2011-07-26 22:24:41 -0400  330) static int extend_or_restart_transaction(handle_t *handle, int thresh)
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  331) {
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  332) 	int err;
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  333) 
0390131ba84f (Frank Mayhar      2009-01-07 00:06:22 -0500  334) 	if (ext4_handle_has_enough_credits(handle, thresh))
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  335) 		return 0;
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  336) 
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  337) 	err = ext4_journal_extend(handle, EXT4_MAX_TRANS_DATA);
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  338) 	if (err < 0)
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  339) 		return err;
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  340) 	if (err) {
6d40bc5a7e8f (Yongqiang Yang    2011-07-26 22:24:41 -0400  341) 		err = ext4_journal_restart(handle, EXT4_MAX_TRANS_DATA);
6d40bc5a7e8f (Yongqiang Yang    2011-07-26 22:24:41 -0400  342) 		if (err)
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  343) 			return err;
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400  344) 	}
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  345) 
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  346) 	return 0;
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  347) }
149041070deb (Eric Sandeen      2007-10-16 18:38:25 -0400  348) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  349) /*
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  350)  * set_flexbg_block_bitmap() mark @count blocks starting from @block used.
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  351)  *
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  352)  * Helper function for ext4_setup_new_group_blocks() which set .
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  353)  *
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  354)  * @sb: super block
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  355)  * @handle: journal handle
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  356)  * @flex_gd: flex group data
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  357)  */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  358) static int set_flexbg_block_bitmap(struct super_block *sb, handle_t *handle,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  359) 			struct ext4_new_flex_group_data *flex_gd,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  360) 			ext4_fsblk_t block, ext4_group_t count)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  361) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  362) 	ext4_group_t count2;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  363) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  364) 	ext4_debug("mark blocks [%llu/%u] used\n", block, count);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  365) 	for (count2 = count; count > 0; count -= count2, block += count2) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  366) 		ext4_fsblk_t start;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  367) 		struct buffer_head *bh;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  368) 		ext4_group_t group;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  369) 		int err;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  370) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  371) 		ext4_get_group_no_and_offset(sb, block, &group, NULL);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  372) 		start = ext4_group_first_block_no(sb, group);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  373) 		group -= flex_gd->groups[0].group;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  374) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  375) 		count2 = sb->s_blocksize * 8 - (block - start);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  376) 		if (count2 > count)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  377) 			count2 = count;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  378) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  379) 		if (flex_gd->bg_flags[group] & EXT4_BG_BLOCK_UNINIT) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  380) 			BUG_ON(flex_gd->count > 1);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  381) 			continue;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  382) 		}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  383) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  384) 		err = extend_or_restart_transaction(handle, 1);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  385) 		if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  386) 			return err;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  387) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  388) 		bh = sb_getblk(sb, flex_gd->groups[group].block_bitmap);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  389) 		if (!bh)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  390) 			return -EIO;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  391) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  392) 		err = ext4_journal_get_write_access(handle, bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  393) 		if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  394) 			return err;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  395) 		ext4_debug("mark block bitmap %#04llx (+%llu/%u)\n", block,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  396) 			   block - start, count2);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  397) 		ext4_set_bits(bh->b_data, block - start, count2);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  398) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  399) 		err = ext4_handle_dirty_metadata(handle, NULL, bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  400) 		if (unlikely(err))
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  401) 			return err;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  402) 		brelse(bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  403) 	}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  404) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  405) 	return 0;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  406) }
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  407) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  408) /*
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  409)  * Set up the block and inode bitmaps, and the inode table for the new groups.
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  410)  * This doesn't need to be part of the main transaction, since we are only
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  411)  * changing blocks outside the actual filesystem.  We still do journaling to
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  412)  * ensure the recovery is correct in case of a failure just after resize.
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  413)  * If any part of this fails, we simply abort the resize.
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  414)  *
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  415)  * setup_new_flex_group_blocks handles a flex group as follow:
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  416)  *  1. copy super block and GDT, and initialize group tables if necessary.
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  417)  *     In this step, we only set bits in blocks bitmaps for blocks taken by
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  418)  *     super block and GDT.
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  419)  *  2. allocate group tables in block bitmaps, that is, set bits in block
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  420)  *     bitmap for blocks taken by group tables.
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  421)  */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  422) static int setup_new_flex_group_blocks(struct super_block *sb,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  423) 				struct ext4_new_flex_group_data *flex_gd)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  424) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  425) 	int group_table_count[] = {1, 1, EXT4_SB(sb)->s_itb_per_group};
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  426) 	ext4_fsblk_t start;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  427) 	ext4_fsblk_t block;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  428) 	struct ext4_sb_info *sbi = EXT4_SB(sb);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  429) 	struct ext4_super_block *es = sbi->s_es;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  430) 	struct ext4_new_group_data *group_data = flex_gd->groups;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  431) 	__u16 *bg_flags = flex_gd->bg_flags;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  432) 	handle_t *handle;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  433) 	ext4_group_t group, count;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  434) 	struct buffer_head *bh = NULL;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  435) 	int reserved_gdb, i, j, err = 0, err2;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  436) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  437) 	BUG_ON(!flex_gd->count || !group_data ||
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  438) 	       group_data[0].group != sbi->s_groups_count);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  439) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  440) 	reserved_gdb = le16_to_cpu(es->s_reserved_gdt_blocks);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  441) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  442) 	/* This transaction may be extended/restarted along the way */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  443) 	handle = ext4_journal_start_sb(sb, EXT4_MAX_TRANS_DATA);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  444) 	if (IS_ERR(handle))
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  445) 		return PTR_ERR(handle);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  446) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  447) 	group = group_data[0].group;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  448) 	for (i = 0; i < flex_gd->count; i++, group++) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  449) 		unsigned long gdblocks;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  450) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  451) 		gdblocks = ext4_bg_num_gdb(sb, group);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  452) 		start = ext4_group_first_block_no(sb, group);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  453) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  454) 		/* Copy all of the GDT blocks into the backup in this group */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  455) 		for (j = 0, block = start + 1; j < gdblocks; j++, block++) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  456) 			struct buffer_head *gdb;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  457) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  458) 			ext4_debug("update backup group %#04llx\n", block);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  459) 			err = extend_or_restart_transaction(handle, 1);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  460) 			if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  461) 				goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  462) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  463) 			gdb = sb_getblk(sb, block);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  464) 			if (!gdb) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  465) 				err = -EIO;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  466) 				goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  467) 			}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  468) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  469) 			err = ext4_journal_get_write_access(handle, gdb);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  470) 			if (err) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  471) 				brelse(gdb);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  472) 				goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  473) 			}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  474) 			memcpy(gdb->b_data, sbi->s_group_desc[j]->b_data,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  475) 			       gdb->b_size);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  476) 			set_buffer_uptodate(gdb);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  477) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  478) 			err = ext4_handle_dirty_metadata(handle, NULL, gdb);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  479) 			if (unlikely(err)) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  480) 				brelse(gdb);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  481) 				goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  482) 			}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  483) 			brelse(gdb);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  484) 		}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  485) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  486) 		/* Zero out all of the reserved backup group descriptor
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  487) 		 * table blocks
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  488) 		 */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  489) 		if (ext4_bg_has_super(sb, group)) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  490) 			err = sb_issue_zeroout(sb, gdblocks + start + 1,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  491) 					reserved_gdb, GFP_NOFS);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  492) 			if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  493) 				goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  494) 		}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  495) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  496) 		/* Initialize group tables of the grop @group */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  497) 		if (!(bg_flags[i] & EXT4_BG_INODE_ZEROED))
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  498) 			goto handle_bb;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  499) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  500) 		/* Zero out all of the inode table blocks */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  501) 		block = group_data[i].inode_table;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  502) 		ext4_debug("clear inode table blocks %#04llx -> %#04lx\n",
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  503) 			   block, sbi->s_itb_per_group);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  504) 		err = sb_issue_zeroout(sb, block, sbi->s_itb_per_group,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  505) 				       GFP_NOFS);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  506) 		if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  507) 			goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  508) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  509) handle_bb:
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  510) 		if (bg_flags[i] & EXT4_BG_BLOCK_UNINIT)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  511) 			goto handle_ib;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  512) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  513) 		/* Initialize block bitmap of the @group */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  514) 		block = group_data[i].block_bitmap;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  515) 		err = extend_or_restart_transaction(handle, 1);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  516) 		if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  517) 			goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  518) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  519) 		bh = bclean(handle, sb, block);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  520) 		if (IS_ERR(bh)) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  521) 			err = PTR_ERR(bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  522) 			goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  523) 		}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  524) 		if (ext4_bg_has_super(sb, group)) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  525) 			ext4_debug("mark backup superblock %#04llx (+0)\n",
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  526) 				   start);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  527) 			ext4_set_bits(bh->b_data, 0, gdblocks + reserved_gdb +
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  528) 						     1);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  529) 		}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  530) 		ext4_mark_bitmap_end(group_data[i].blocks_count,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  531) 				     sb->s_blocksize * 8, bh->b_data);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  532) 		err = ext4_handle_dirty_metadata(handle, NULL, bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  533) 		if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  534) 			goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  535) 		brelse(bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  536) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  537) handle_ib:
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  538) 		if (bg_flags[i] & EXT4_BG_INODE_UNINIT)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  539) 			continue;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  540) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  541) 		/* Initialize inode bitmap of the @group */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  542) 		block = group_data[i].inode_bitmap;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  543) 		err = extend_or_restart_transaction(handle, 1);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  544) 		if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  545) 			goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  546) 		/* Mark unused entries in inode bitmap used */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  547) 		bh = bclean(handle, sb, block);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  548) 		if (IS_ERR(bh)) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  549) 			err = PTR_ERR(bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  550) 			goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  551) 		}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  552) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  553) 		ext4_mark_bitmap_end(EXT4_INODES_PER_GROUP(sb),
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  554) 				     sb->s_blocksize * 8, bh->b_data);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  555) 		err = ext4_handle_dirty_metadata(handle, NULL, bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  556) 		if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  557) 			goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  558) 		brelse(bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  559) 	}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  560) 	bh = NULL;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  561) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  562) 	/* Mark group tables in block bitmap */
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  563) 	for (j = 0; j < GROUP_TABLE_COUNT; j++) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  564) 		count = group_table_count[j];
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  565) 		start = (&group_data[0].block_bitmap)[j];
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  566) 		block = start;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  567) 		for (i = 1; i < flex_gd->count; i++) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  568) 			block += group_table_count[j];
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  569) 			if (block == (&group_data[i].block_bitmap)[j]) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  570) 				count += group_table_count[j];
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  571) 				continue;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  572) 			}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  573) 			err = set_flexbg_block_bitmap(sb, handle,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  574) 						flex_gd, start, count);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  575) 			if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  576) 				goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  577) 			count = group_table_count[j];
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  578) 			start = group_data[i].block_bitmap;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  579) 			block = start;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  580) 		}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  581) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  582) 		if (count) {
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  583) 			err = set_flexbg_block_bitmap(sb, handle,
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  584) 						flex_gd, start, count);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  585) 			if (err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  586) 				goto out;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  587) 		}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  588) 	}
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  589) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  590) out:
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  591) 	brelse(bh);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  592) 	err2 = ext4_journal_stop(handle);
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  593) 	if (err2 && !err)
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  594) 		err = err2;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  595) 
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  596) 	return err;
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  597) }
33afdcc5402d (Yongqiang Yang    2012-01-03 23:32:52 -0500  598) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  599) /*
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  600)  * Iterate through the groups which hold BACKUP superblock/GDT copies in an
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  601)  * ext4 filesystem.  The counters should be initialized to 1, 5, and 7 before
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  602)  * calling this for the first time.  In a sparse filesystem it will be the
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  603)  * sequence of powers of 3, 5, and 7: 1, 3, 5, 7, 9, 25, 27, 49, 81, ...
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  604)  * For a non-sparse filesystem it will be every group: 1, 2, 3, 4, ...
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  605)  */
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  606) static unsigned ext4_list_backups(struct super_block *sb, unsigned *three,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  607) 				  unsigned *five, unsigned *seven)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  608) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  609) 	unsigned *min = three;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  610) 	int mult = 3;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  611) 	unsigned ret;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  612) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  613) 	if (!EXT4_HAS_RO_COMPAT_FEATURE(sb,
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  614) 					EXT4_FEATURE_RO_COMPAT_SPARSE_SUPER)) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  615) 		ret = *min;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  616) 		*min += 1;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  617) 		return ret;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  618) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  619) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  620) 	if (*five < *min) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  621) 		min = five;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  622) 		mult = 5;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  623) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  624) 	if (*seven < *min) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  625) 		min = seven;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  626) 		mult = 7;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  627) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  628) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  629) 	ret = *min;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  630) 	*min *= mult;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  631) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  632) 	return ret;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  633) }
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  634) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  635) /*
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  636)  * Check that all of the backup GDT blocks are held in the primary GDT block.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  637)  * It is assumed that they are stored in group order.  Returns the number of
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  638)  * groups in current filesystem that have BACKUPS, or -ve error code.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  639)  */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  640) static int verify_reserved_gdb(struct super_block *sb,
c72df9f928ef (Yongqiang Yang    2012-01-03 23:43:39 -0500  641) 			       ext4_group_t end,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  642) 			       struct buffer_head *primary)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  643) {
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  644) 	const ext4_fsblk_t blk = primary->b_blocknr;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  645) 	unsigned three = 1;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  646) 	unsigned five = 5;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  647) 	unsigned seven = 7;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  648) 	unsigned grp;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  649) 	__le32 *p = (__le32 *)primary->b_data;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  650) 	int gdbackups = 0;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  651) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  652) 	while ((grp = ext4_list_backups(sb, &three, &five, &seven)) < end) {
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700  653) 		if (le32_to_cpu(*p++) !=
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700  654) 		    grp * EXT4_BLOCKS_PER_GROUP(sb) + blk){
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  655) 			ext4_warning(sb, "reserved GDT %llu"
2ae0210760ae (Mingming Cao      2006-10-11 01:21:11 -0700  656) 				     " missing grp %d (%llu)",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  657) 				     blk, grp,
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700  658) 				     grp *
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700  659) 				     (ext4_fsblk_t)EXT4_BLOCKS_PER_GROUP(sb) +
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700  660) 				     blk);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  661) 			return -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  662) 		}
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  663) 		if (++gdbackups > EXT4_ADDR_PER_BLOCK(sb))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  664) 			return -EFBIG;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  665) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  666) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  667) 	return gdbackups;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  668) }
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  669) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  670) /*
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  671)  * Called when we need to bring a reserved group descriptor table block into
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  672)  * use from the resize inode.  The primary copy of the new GDT block currently
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  673)  * is an indirect block (under the double indirect block in the resize inode).
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  674)  * The new backup GDT blocks will be stored as leaf blocks in this indirect
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  675)  * block, in group order.  Even though we know all the block numbers we need,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  676)  * we check to ensure that the resize inode has actually reserved these blocks.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  677)  *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  678)  * Don't need to update the block bitmaps because the blocks are still in use.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  679)  *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  680)  * We get all of the error cases out of the way, so that we are sure to not
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  681)  * fail once we start modifying the data on disk, because JBD has no rollback.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  682)  */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  683) static int add_new_gdb(handle_t *handle, struct inode *inode,
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  684) 		       ext4_group_t group)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  685) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  686) 	struct super_block *sb = inode->i_sb;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  687) 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  688) 	unsigned long gdb_num = group / EXT4_DESC_PER_BLOCK(sb);
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  689) 	ext4_fsblk_t gdblock = EXT4_SB(sb)->s_sbh->b_blocknr + 1 + gdb_num;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  690) 	struct buffer_head **o_group_desc, **n_group_desc;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  691) 	struct buffer_head *dind;
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  692) 	struct buffer_head *gdb_bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  693) 	int gdbackups;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  694) 	struct ext4_iloc iloc;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  695) 	__le32 *data;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  696) 	int err;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  697) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  698) 	if (test_opt(sb, DEBUG))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  699) 		printk(KERN_DEBUG
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  700) 		       "EXT4-fs: ext4_add_new_gdb: adding group block %lu\n",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  701) 		       gdb_num);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  702) 
af5bc92dded4 (Theodore Ts'o     2008-09-08 22:25:24 -0400  703) 	/*
af5bc92dded4 (Theodore Ts'o     2008-09-08 22:25:24 -0400  704) 	 * If we are not using the primary superblock/GDT copy don't resize,
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400  705)          * because the user tools have no way of handling this.  Probably a
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400  706)          * bad time to do it anyways.
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400  707)          */
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  708) 	if (EXT4_SB(sb)->s_sbh->b_blocknr !=
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  709) 	    le32_to_cpu(EXT4_SB(sb)->s_es->s_first_data_block)) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  710) 		ext4_warning(sb, "won't resize using backup superblock at %llu",
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  711) 			(unsigned long long)EXT4_SB(sb)->s_sbh->b_blocknr);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  712) 		return -EPERM;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  713) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  714) 
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  715) 	gdb_bh = sb_bread(sb, gdblock);
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  716) 	if (!gdb_bh)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  717) 		return -EIO;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  718) 
c72df9f928ef (Yongqiang Yang    2012-01-03 23:43:39 -0500  719) 	gdbackups = verify_reserved_gdb(sb, group, gdb_bh);
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  720) 	if (gdbackups < 0) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  721) 		err = gdbackups;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  722) 		goto exit_bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  723) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  724) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  725) 	data = EXT4_I(inode)->i_data + EXT4_DIND_BLOCK;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  726) 	dind = sb_bread(sb, le32_to_cpu(*data));
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  727) 	if (!dind) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  728) 		err = -EIO;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  729) 		goto exit_bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  730) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  731) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  732) 	data = (__le32 *)dind->b_data;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  733) 	if (le32_to_cpu(data[gdb_num % EXT4_ADDR_PER_BLOCK(sb)]) != gdblock) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  734) 		ext4_warning(sb, "new group %u GDT block %llu not reserved",
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  735) 			     group, gdblock);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  736) 		err = -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  737) 		goto exit_dind;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  738) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  739) 
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  740) 	err = ext4_journal_get_write_access(handle, EXT4_SB(sb)->s_sbh);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  741) 	if (unlikely(err))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  742) 		goto exit_dind;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  743) 
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  744) 	err = ext4_journal_get_write_access(handle, gdb_bh);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  745) 	if (unlikely(err))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  746) 		goto exit_sbh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  747) 
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  748) 	err = ext4_journal_get_write_access(handle, dind);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  749) 	if (unlikely(err))
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  750) 		ext4_std_error(sb, err);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  751) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  752) 	/* ext4_reserve_inode_write() gets a reference on the iloc */
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  753) 	err = ext4_reserve_inode_write(handle, inode, &iloc);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  754) 	if (unlikely(err))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  755) 		goto exit_dindj;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  756) 
f18a5f21c257 (Theodore Ts'o     2011-08-01 08:45:38 -0400  757) 	n_group_desc = ext4_kvmalloc((gdb_num + 1) *
f18a5f21c257 (Theodore Ts'o     2011-08-01 08:45:38 -0400  758) 				     sizeof(struct buffer_head *),
f18a5f21c257 (Theodore Ts'o     2011-08-01 08:45:38 -0400  759) 				     GFP_NOFS);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  760) 	if (!n_group_desc) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  761) 		err = -ENOMEM;
f18a5f21c257 (Theodore Ts'o     2011-08-01 08:45:38 -0400  762) 		ext4_warning(sb, "not enough memory for %lu groups",
f18a5f21c257 (Theodore Ts'o     2011-08-01 08:45:38 -0400  763) 			     gdb_num + 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  764) 		goto exit_inode;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  765) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  766) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  767) 	/*
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  768) 	 * Finally, we have all of the possible failures behind us...
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  769) 	 *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  770) 	 * Remove new GDT block from inode double-indirect block and clear out
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  771) 	 * the new GDT block for use (which also "frees" the backup GDT blocks
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  772) 	 * from the reserved inode).  We don't need to change the bitmaps for
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  773) 	 * these blocks, because they are marked as in-use from being in the
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  774) 	 * reserved inode, and will become GDT blocks (primary and backup).
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  775) 	 */
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  776) 	data[gdb_num % EXT4_ADDR_PER_BLOCK(sb)] = 0;
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  777) 	err = ext4_handle_dirty_metadata(handle, NULL, dind);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  778) 	if (unlikely(err)) {
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  779) 		ext4_std_error(sb, err);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  780) 		goto exit_inode;
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  781) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  782) 	inode->i_blocks -= (gdbackups + 1) * sb->s_blocksize >> 9;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  783) 	ext4_mark_iloc_dirty(handle, inode, &iloc);
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  784) 	memset(gdb_bh->b_data, 0, sb->s_blocksize);
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  785) 	err = ext4_handle_dirty_metadata(handle, NULL, gdb_bh);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  786) 	if (unlikely(err)) {
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  787) 		ext4_std_error(sb, err);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  788) 		goto exit_inode;
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  789) 	}
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  790) 	brelse(dind);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  791) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  792) 	o_group_desc = EXT4_SB(sb)->s_group_desc;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  793) 	memcpy(n_group_desc, o_group_desc,
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  794) 	       EXT4_SB(sb)->s_gdb_count * sizeof(struct buffer_head *));
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  795) 	n_group_desc[gdb_num] = gdb_bh;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  796) 	EXT4_SB(sb)->s_group_desc = n_group_desc;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  797) 	EXT4_SB(sb)->s_gdb_count++;
f18a5f21c257 (Theodore Ts'o     2011-08-01 08:45:38 -0400  798) 	ext4_kvfree(o_group_desc);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  799) 
e8546d061554 (Marcin Slusarz    2008-04-17 10:38:59 -0400  800) 	le16_add_cpu(&es->s_reserved_gdt_blocks, -1);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  801) 	err = ext4_handle_dirty_metadata(handle, NULL, EXT4_SB(sb)->s_sbh);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  802) 	if (err)
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  803) 		ext4_std_error(sb, err);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  804) 
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  805) 	return err;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  806) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  807) exit_inode:
f18a5f21c257 (Theodore Ts'o     2011-08-01 08:45:38 -0400  808) 	ext4_kvfree(n_group_desc);
537a03103c67 (Amir Goldstein    2011-03-20 22:57:02 -0400  809) 	/* ext4_handle_release_buffer(handle, iloc.bh); */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  810) 	brelse(iloc.bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  811) exit_dindj:
537a03103c67 (Amir Goldstein    2011-03-20 22:57:02 -0400  812) 	/* ext4_handle_release_buffer(handle, dind); */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  813) exit_sbh:
537a03103c67 (Amir Goldstein    2011-03-20 22:57:02 -0400  814) 	/* ext4_handle_release_buffer(handle, EXT4_SB(sb)->s_sbh); */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  815) exit_dind:
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  816) 	brelse(dind);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  817) exit_bh:
2f919710143c (Yongqiang Yang    2011-07-27 21:16:33 -0400  818) 	brelse(gdb_bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  819) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  820) 	ext4_debug("leaving with error %d\n", err);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  821) 	return err;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  822) }
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  823) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  824) /*
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  825)  * Called when we are adding a new group which has a backup copy of each of
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  826)  * the GDT blocks (i.e. sparse group) and there are reserved GDT blocks.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  827)  * We need to add these reserved backup GDT blocks to the resize inode, so
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  828)  * that they are kept for future resizing and not allocated to files.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  829)  *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  830)  * Each reserved backup GDT block will go into a different indirect block.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  831)  * The indirect blocks are actually the primary reserved GDT blocks,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  832)  * so we know in advance what their block numbers are.  We only get the
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  833)  * double-indirect block to verify it is pointing to the primary reserved
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  834)  * GDT blocks so we don't overwrite a data block by accident.  The reserved
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  835)  * backup GDT blocks are stored in their reserved primary GDT block.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  836)  */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  837) static int reserve_backup_gdb(handle_t *handle, struct inode *inode,
668f4dc55933 (Yongqiang Yang    2011-07-27 21:23:13 -0400  838) 			      ext4_group_t group)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  839) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  840) 	struct super_block *sb = inode->i_sb;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  841) 	int reserved_gdb =le16_to_cpu(EXT4_SB(sb)->s_es->s_reserved_gdt_blocks);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  842) 	struct buffer_head **primary;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  843) 	struct buffer_head *dind;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  844) 	struct ext4_iloc iloc;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  845) 	ext4_fsblk_t blk;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  846) 	__le32 *data, *end;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  847) 	int gdbackups = 0;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  848) 	int res, i;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  849) 	int err;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  850) 
216553c4b7f3 (Josef Bacik       2008-04-29 22:02:02 -0400  851) 	primary = kmalloc(reserved_gdb * sizeof(*primary), GFP_NOFS);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  852) 	if (!primary)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  853) 		return -ENOMEM;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  854) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  855) 	data = EXT4_I(inode)->i_data + EXT4_DIND_BLOCK;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  856) 	dind = sb_bread(sb, le32_to_cpu(*data));
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  857) 	if (!dind) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  858) 		err = -EIO;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  859) 		goto exit_free;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  860) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  861) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  862) 	blk = EXT4_SB(sb)->s_sbh->b_blocknr + 1 + EXT4_SB(sb)->s_gdb_count;
944600930a37 (Josef Bacik       2008-06-06 18:05:52 -0400  863) 	data = (__le32 *)dind->b_data + (EXT4_SB(sb)->s_gdb_count %
944600930a37 (Josef Bacik       2008-06-06 18:05:52 -0400  864) 					 EXT4_ADDR_PER_BLOCK(sb));
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  865) 	end = (__le32 *)dind->b_data + EXT4_ADDR_PER_BLOCK(sb);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  866) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  867) 	/* Get each reserved primary GDT block and verify it holds backups */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  868) 	for (res = 0; res < reserved_gdb; res++, blk++) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  869) 		if (le32_to_cpu(*data) != blk) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500  870) 			ext4_warning(sb, "reserved block %llu"
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  871) 				     " not at offset %ld",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  872) 				     blk,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  873) 				     (long)(data - (__le32 *)dind->b_data));
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  874) 			err = -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  875) 			goto exit_bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  876) 		}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  877) 		primary[res] = sb_bread(sb, blk);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  878) 		if (!primary[res]) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  879) 			err = -EIO;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  880) 			goto exit_bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  881) 		}
c72df9f928ef (Yongqiang Yang    2012-01-03 23:43:39 -0500  882) 		gdbackups = verify_reserved_gdb(sb, group, primary[res]);
c72df9f928ef (Yongqiang Yang    2012-01-03 23:43:39 -0500  883) 		if (gdbackups < 0) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  884) 			brelse(primary[res]);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  885) 			err = gdbackups;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  886) 			goto exit_bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  887) 		}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  888) 		if (++data >= end)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  889) 			data = (__le32 *)dind->b_data;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  890) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  891) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  892) 	for (i = 0; i < reserved_gdb; i++) {
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  893) 		if ((err = ext4_journal_get_write_access(handle, primary[i]))) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  894) 			/*
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  895) 			int j;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  896) 			for (j = 0; j < i; j++)
537a03103c67 (Amir Goldstein    2011-03-20 22:57:02 -0400  897) 				ext4_handle_release_buffer(handle, primary[j]);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  898) 			 */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  899) 			goto exit_bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  900) 		}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  901) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  902) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  903) 	if ((err = ext4_reserve_inode_write(handle, inode, &iloc)))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  904) 		goto exit_bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  905) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  906) 	/*
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  907) 	 * Finally we can add each of the reserved backup GDT blocks from
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  908) 	 * the new group to its reserved primary GDT block.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  909) 	 */
668f4dc55933 (Yongqiang Yang    2011-07-27 21:23:13 -0400  910) 	blk = group * EXT4_BLOCKS_PER_GROUP(sb);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  911) 	for (i = 0; i < reserved_gdb; i++) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  912) 		int err2;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  913) 		data = (__le32 *)primary[i]->b_data;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  914) 		/* printk("reserving backup %lu[%u] = %lu\n",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  915) 		       primary[i]->b_blocknr, gdbackups,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  916) 		       blk + primary[i]->b_blocknr); */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  917) 		data[gdbackups] = cpu_to_le32(blk + primary[i]->b_blocknr);
0390131ba84f (Frank Mayhar      2009-01-07 00:06:22 -0500  918) 		err2 = ext4_handle_dirty_metadata(handle, NULL, primary[i]);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  919) 		if (!err)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  920) 			err = err2;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  921) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  922) 	inode->i_blocks += reserved_gdb * sb->s_blocksize >> 9;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  923) 	ext4_mark_iloc_dirty(handle, inode, &iloc);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  924) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  925) exit_bh:
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  926) 	while (--res >= 0)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  927) 		brelse(primary[res]);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  928) 	brelse(dind);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  929) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  930) exit_free:
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  931) 	kfree(primary);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  932) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  933) 	return err;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  934) }
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  935) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  936) /*
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  937)  * Update the backup copies of the ext4 metadata.  These don't need to be part
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  938)  * of the main resize transaction, because e2fsck will re-write them if there
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  939)  * is a problem (basically only OOM will cause a problem).  However, we
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  940)  * _should_ update the backups if possible, in case the primary gets trashed
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  941)  * for some reason and we need to run e2fsck from a backup superblock.  The
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  942)  * important part is that the new block and inode counts are in the backup
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  943)  * superblocks, and the location of the new group metadata in the GDT backups.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  944)  *
32ed5058ce90 (Theodore Ts'o     2009-04-25 22:53:39 -0400  945)  * We do not need take the s_resize_lock for this, because these
32ed5058ce90 (Theodore Ts'o     2009-04-25 22:53:39 -0400  946)  * blocks are not otherwise touched by the filesystem code when it is
32ed5058ce90 (Theodore Ts'o     2009-04-25 22:53:39 -0400  947)  * mounted.  We don't need to worry about last changing from
32ed5058ce90 (Theodore Ts'o     2009-04-25 22:53:39 -0400  948)  * sbi->s_groups_count, because the worst that can happen is that we
32ed5058ce90 (Theodore Ts'o     2009-04-25 22:53:39 -0400  949)  * do not copy the full number of backups at this time.  The resize
32ed5058ce90 (Theodore Ts'o     2009-04-25 22:53:39 -0400  950)  * which changed s_groups_count will backup again.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  951)  */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  952) static void update_backups(struct super_block *sb,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  953) 			   int blk_off, char *data, int size)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  954) {
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  955) 	struct ext4_sb_info *sbi = EXT4_SB(sb);
fd2d42912f9f (Avantika Mathur   2008-01-28 23:58:27 -0500  956) 	const ext4_group_t last = sbi->s_groups_count;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  957) 	const int bpg = EXT4_BLOCKS_PER_GROUP(sb);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  958) 	unsigned three = 1;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  959) 	unsigned five = 5;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  960) 	unsigned seven = 7;
fd2d42912f9f (Avantika Mathur   2008-01-28 23:58:27 -0500  961) 	ext4_group_t group;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  962) 	int rest = sb->s_blocksize - size;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  963) 	handle_t *handle;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  964) 	int err = 0, err2;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  965) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  966) 	handle = ext4_journal_start_sb(sb, EXT4_MAX_TRANS_DATA);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  967) 	if (IS_ERR(handle)) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  968) 		group = 1;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  969) 		err = PTR_ERR(handle);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  970) 		goto exit_err;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  971) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  972) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  973) 	while ((group = ext4_list_backups(sb, &three, &five, &seven)) < last) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  974) 		struct buffer_head *bh;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  975) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  976) 		/* Out of journal space, and can't get more - abort - so sad */
0390131ba84f (Frank Mayhar      2009-01-07 00:06:22 -0500  977) 		if (ext4_handle_valid(handle) &&
0390131ba84f (Frank Mayhar      2009-01-07 00:06:22 -0500  978) 		    handle->h_buffer_credits == 0 &&
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  979) 		    ext4_journal_extend(handle, EXT4_MAX_TRANS_DATA) &&
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  980) 		    (err = ext4_journal_restart(handle, EXT4_MAX_TRANS_DATA)))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  981) 			break;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  982) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  983) 		bh = sb_getblk(sb, group * bpg + blk_off);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  984) 		if (!bh) {
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  985) 			err = -EIO;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  986) 			break;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  987) 		}
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  988) 		ext4_debug("update metadata backup %#04lx\n",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  989) 			  (unsigned long)bh->b_blocknr);
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700  990) 		if ((err = ext4_journal_get_write_access(handle, bh)))
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  991) 			break;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  992) 		lock_buffer(bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  993) 		memcpy(bh->b_data, data, size);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  994) 		if (rest)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  995) 			memset(bh->b_data + size, 0, rest);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  996) 		set_buffer_uptodate(bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700  997) 		unlock_buffer(bh);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  998) 		err = ext4_handle_dirty_metadata(handle, NULL, bh);
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500  999) 		if (unlikely(err))
b40971426a83 (Theodore Ts'o     2011-01-10 12:46:59 -0500 1000) 			ext4_std_error(sb, err);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1001) 		brelse(bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1002) 	}
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1003) 	if ((err2 = ext4_journal_stop(handle)) && !err)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1004) 		err = err2;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1005) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1006) 	/*
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1007) 	 * Ugh! Need to have e2fsck write the backup copies.  It is too
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1008) 	 * late to revert the resize, we shouldn't fail just because of
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1009) 	 * the backup copies (they are only needed in case of corruption).
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1010) 	 *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1011) 	 * However, if we got here we have a journal problem too, so we
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1012) 	 * can't really start a transaction to mark the superblock.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1013) 	 * Chicken out and just set the flag on the hope it will be written
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1014) 	 * to disk, and if not - we will simply wait until next fsck.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1015) 	 */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1016) exit_err:
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1017) 	if (err) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1018) 		ext4_warning(sb, "can't update backup for group %u (err %d), "
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1019) 			     "forcing fsck on next reboot", group, err);
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1020) 		sbi->s_mount_state &= ~EXT4_VALID_FS;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1021) 		sbi->s_es->s_state &= cpu_to_le16(~EXT4_VALID_FS);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1022) 		mark_buffer_dirty(sbi->s_sbh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1023) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1024) }
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1025) 
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1026) /*
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1027)  * ext4_add_new_descs() adds @count group descriptor of groups
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1028)  * starting at @group
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1029)  *
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1030)  * @handle: journal handle
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1031)  * @sb: super block
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1032)  * @group: the group no. of the first group desc to be added
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1033)  * @resize_inode: the resize inode
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1034)  * @count: number of group descriptors to be added
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1035)  */
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1036) static int ext4_add_new_descs(handle_t *handle, struct super_block *sb,
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1037) 			      ext4_group_t group, struct inode *resize_inode,
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1038) 			      ext4_group_t count)
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1039) {
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1040) 	struct ext4_sb_info *sbi = EXT4_SB(sb);
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1041) 	struct ext4_super_block *es = sbi->s_es;
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1042) 	struct buffer_head *gdb_bh;
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1043) 	int i, gdb_off, gdb_num, err = 0;
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1044) 
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1045) 	for (i = 0; i < count; i++, group++) {
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1046) 		int reserved_gdb = ext4_bg_has_super(sb, group) ?
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1047) 			le16_to_cpu(es->s_reserved_gdt_blocks) : 0;
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1048) 
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1049) 		gdb_off = group % EXT4_DESC_PER_BLOCK(sb);
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1050) 		gdb_num = group / EXT4_DESC_PER_BLOCK(sb);
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1051) 
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1052) 		/*
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1053) 		 * We will only either add reserved group blocks to a backup group
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1054) 		 * or remove reserved blocks for the first group in a new group block.
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1055) 		 * Doing both would be mean more complex code, and sane people don't
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1056) 		 * use non-sparse filesystems anymore.  This is already checked above.
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1057) 		 */
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1058) 		if (gdb_off) {
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1059) 			gdb_bh = sbi->s_group_desc[gdb_num];
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1060) 			err = ext4_journal_get_write_access(handle, gdb_bh);
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1061) 
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1062) 			if (!err && reserved_gdb && ext4_bg_num_gdb(sb, group))
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1063) 				err = reserve_backup_gdb(handle, resize_inode, group);
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1064) 		} else
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1065) 			err = add_new_gdb(handle, resize_inode, group);
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1066) 		if (err)
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1067) 			break;
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1068) 	}
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1069) 	return err;
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1070) }
bb08c1e7d8c0 (Yongqiang Yang    2012-01-03 23:20:50 -0500 1071) 
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1072) /*
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1073)  * ext4_setup_new_descs() will set up the group descriptor descriptors of a flex bg
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1074)  */
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1075) static int ext4_setup_new_descs(handle_t *handle, struct super_block *sb,
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1076) 				struct ext4_new_flex_group_data *flex_gd)
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1077) {
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1078) 	struct ext4_new_group_data	*group_data = flex_gd->groups;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1079) 	struct ext4_group_desc		*gdp;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1080) 	struct ext4_sb_info		*sbi = EXT4_SB(sb);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1081) 	struct buffer_head		*gdb_bh;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1082) 	ext4_group_t			group;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1083) 	__u16				*bg_flags = flex_gd->bg_flags;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1084) 	int				i, gdb_off, gdb_num, err = 0;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1085) 	
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1086) 
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1087) 	for (i = 0; i < flex_gd->count; i++, group_data++, bg_flags++) {
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1088) 		group = group_data->group;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1089) 
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1090) 		gdb_off = group % EXT4_DESC_PER_BLOCK(sb);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1091) 		gdb_num = group / EXT4_DESC_PER_BLOCK(sb);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1092) 
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1093) 		/*
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1094) 		 * get_write_access() has been called on gdb_bh by ext4_add_new_desc().
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1095) 		 */
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1096) 		gdb_bh = sbi->s_group_desc[gdb_num];
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1097) 		/* Update group descriptor block for new group */
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1098) 		gdp = (struct ext4_group_desc *)((char *)gdb_bh->b_data +
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1099) 						 gdb_off * EXT4_DESC_SIZE(sb));
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1100) 
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1101) 		memset(gdp, 0, EXT4_DESC_SIZE(sb));
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1102) 		ext4_block_bitmap_set(sb, gdp, group_data->block_bitmap);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1103) 		ext4_inode_bitmap_set(sb, gdp, group_data->inode_bitmap);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1104) 		ext4_inode_table_set(sb, gdp, group_data->inode_table);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1105) 		ext4_free_group_clusters_set(sb, gdp,
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1106) 					     EXT4_B2C(sbi, group_data->free_blocks_count));
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1107) 		ext4_free_inodes_set(sb, gdp, EXT4_INODES_PER_GROUP(sb));
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1108) 		gdp->bg_flags = cpu_to_le16(*bg_flags);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1109) 		gdp->bg_checksum = ext4_group_desc_csum(sbi, group, gdp);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1110) 
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1111) 		err = ext4_handle_dirty_metadata(handle, NULL, gdb_bh);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1112) 		if (unlikely(err)) {
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1113) 			ext4_std_error(sb, err);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1114) 			break;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1115) 		}
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1116) 
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1117) 		/*
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1118) 		 * We can allocate memory for mb_alloc based on the new group
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1119) 		 * descriptor
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1120) 		 */
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1121) 		err = ext4_mb_add_groupinfo(sb, group, gdp);
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1122) 		if (err)
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1123) 			break;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1124) 	}
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1125) 	return err;
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1126) }
083f5b24cc55 (Yongqiang Yang    2012-01-03 23:37:31 -0500 1127) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1128) /*
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1129)  * ext4_update_super() updates the super block so that the newly added
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1130)  * groups can be seen by the filesystem.
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1131)  *
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1132)  * @sb: super block
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1133)  * @flex_gd: new added groups
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1134)  */
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1135) static void ext4_update_super(struct super_block *sb,
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1136) 			     struct ext4_new_flex_group_data *flex_gd)
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1137) {
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1138) 	ext4_fsblk_t blocks_count = 0;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1139) 	ext4_fsblk_t free_blocks = 0;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1140) 	ext4_fsblk_t reserved_blocks = 0;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1141) 	struct ext4_new_group_data *group_data = flex_gd->groups;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1142) 	struct ext4_sb_info *sbi = EXT4_SB(sb);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1143) 	struct ext4_super_block *es = sbi->s_es;
e3659900e4db (Theodore Ts'o     2012-07-09 16:27:05 -0400 1144) 	int i, ret;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1145) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1146) 	BUG_ON(flex_gd->count == 0 || group_data == NULL);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1147) 	/*
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1148) 	 * Make the new blocks and inodes valid next.  We do this before
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1149) 	 * increasing the group count so that once the group is enabled,
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1150) 	 * all of its blocks and inodes are already valid.
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1151) 	 *
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1152) 	 * We always allocate group-by-group, then block-by-block or
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1153) 	 * inode-by-inode within a group, so enabling these
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1154) 	 * blocks/inodes before the group is live won't actually let us
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1155) 	 * allocate the new space yet.
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1156) 	 */
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1157) 	for (i = 0; i < flex_gd->count; i++) {
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1158) 		blocks_count += group_data[i].blocks_count;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1159) 		free_blocks += group_data[i].free_blocks_count;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1160) 	}
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1161) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1162) 	reserved_blocks = ext4_r_blocks_count(es) * 100;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1163) 	do_div(reserved_blocks, ext4_blocks_count(es));
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1164) 	reserved_blocks *= blocks_count;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1165) 	do_div(reserved_blocks, 100);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1166) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1167) 	ext4_blocks_count_set(es, ext4_blocks_count(es) + blocks_count);
636d7e2e3b57 (Darrick J. Wong   2012-03-20 15:46:11 -0400 1168) 	ext4_free_blocks_count_set(es, ext4_free_blocks_count(es) + free_blocks);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1169) 	le32_add_cpu(&es->s_inodes_count, EXT4_INODES_PER_GROUP(sb) *
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1170) 		     flex_gd->count);
636d7e2e3b57 (Darrick J. Wong   2012-03-20 15:46:11 -0400 1171) 	le32_add_cpu(&es->s_free_inodes_count, EXT4_INODES_PER_GROUP(sb) *
636d7e2e3b57 (Darrick J. Wong   2012-03-20 15:46:11 -0400 1172) 		     flex_gd->count);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1173) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1174) 	/*
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1175) 	 * We need to protect s_groups_count against other CPUs seeing
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1176) 	 * inconsistent state in the superblock.
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1177) 	 *
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1178) 	 * The precise rules we use are:
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1179) 	 *
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1180) 	 * * Writers must perform a smp_wmb() after updating all
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1181) 	 *   dependent data and before modifying the groups count
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1182) 	 *
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1183) 	 * * Readers must perform an smp_rmb() after reading the groups
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1184) 	 *   count and before reading any dependent data.
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1185) 	 *
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1186) 	 * NB. These rules can be relaxed when checking the group count
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1187) 	 * while freeing data, as we can only allocate from a block
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1188) 	 * group after serialising against the group count, and we can
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1189) 	 * only then free after serialising in turn against that
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1190) 	 * allocation.
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1191) 	 */
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1192) 	smp_wmb();
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1193) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1194) 	/* Update the global fs size fields */
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1195) 	sbi->s_groups_count += flex_gd->count;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1196) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1197) 	/* Update the reserved block counts only once the new group is
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1198) 	 * active. */
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1199) 	ext4_r_blocks_count_set(es, ext4_r_blocks_count(es) +
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1200) 				reserved_blocks);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1201) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1202) 	/* Update the free space counts */
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1203) 	percpu_counter_add(&sbi->s_freeclusters_counter,
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1204) 			   EXT4_B2C(sbi, free_blocks));
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1205) 	percpu_counter_add(&sbi->s_freeinodes_counter,
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1206) 			   EXT4_INODES_PER_GROUP(sb) * flex_gd->count);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1207) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1208) 	if (EXT4_HAS_INCOMPAT_FEATURE(sb,
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1209) 				      EXT4_FEATURE_INCOMPAT_FLEX_BG) &&
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1210) 	    sbi->s_log_groups_per_flex) {
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1211) 		ext4_group_t flex_group;
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1212) 		flex_group = ext4_flex_group(sbi, group_data[0].group);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1213) 		atomic_add(EXT4_B2C(sbi, free_blocks),
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1214) 			   &sbi->s_flex_groups[flex_group].free_clusters);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1215) 		atomic_add(EXT4_INODES_PER_GROUP(sb) * flex_gd->count,
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1216) 			   &sbi->s_flex_groups[flex_group].free_inodes);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1217) 	}
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1218) 
e3659900e4db (Theodore Ts'o     2012-07-09 16:27:05 -0400 1219) 	/*
e3659900e4db (Theodore Ts'o     2012-07-09 16:27:05 -0400 1220) 	 * Update the fs overhead information
e3659900e4db (Theodore Ts'o     2012-07-09 16:27:05 -0400 1221) 	 */
e3659900e4db (Theodore Ts'o     2012-07-09 16:27:05 -0400 1222) 	ext4_calculate_overhead(sb);
e3659900e4db (Theodore Ts'o     2012-07-09 16:27:05 -0400 1223) 
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1224) 	if (test_opt(sb, DEBUG))
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1225) 		printk(KERN_DEBUG "EXT4-fs: added group %u:"
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1226) 		       "%llu blocks(%llu free %llu reserved)\n", flex_gd->count,
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1227) 		       blocks_count, free_blocks, reserved_blocks);
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1228) }
2e10e2f2e5a8 (Yongqiang Yang    2012-01-03 23:41:39 -0500 1229) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1230) /* Add a flex group to an fs. Ensure we handle all possible error conditions
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1231)  * _before_ we start modifying the filesystem, because we cannot abort the
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1232)  * transaction and not have it write the data to disk.
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1233)  */
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1234) static int ext4_flex_group_add(struct super_block *sb,
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1235) 			       struct inode *resize_inode,
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1236) 			       struct ext4_new_flex_group_data *flex_gd)
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1237) {
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1238) 	struct ext4_sb_info *sbi = EXT4_SB(sb);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1239) 	struct ext4_super_block *es = sbi->s_es;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1240) 	ext4_fsblk_t o_blocks_count;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1241) 	ext4_grpblk_t last;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1242) 	ext4_group_t group;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1243) 	handle_t *handle;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1244) 	unsigned reserved_gdb;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1245) 	int err = 0, err2 = 0, credit;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1246) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1247) 	BUG_ON(!flex_gd->count || !flex_gd->groups || !flex_gd->bg_flags);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1248) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1249) 	reserved_gdb = le16_to_cpu(es->s_reserved_gdt_blocks);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1250) 	o_blocks_count = ext4_blocks_count(es);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1251) 	ext4_get_group_no_and_offset(sb, o_blocks_count, &group, &last);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1252) 	BUG_ON(last);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1253) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1254) 	err = setup_new_flex_group_blocks(sb, flex_gd);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1255) 	if (err)
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1256) 		goto exit;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1257) 	/*
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1258) 	 * We will always be modifying at least the superblock and  GDT
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1259) 	 * block.  If we are adding a group past the last current GDT block,
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1260) 	 * we will also modify the inode and the dindirect block.  If we
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1261) 	 * are adding a group with superblock/GDT backups  we will also
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1262) 	 * modify each of the reserved GDT dindirect blocks.
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1263) 	 */
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1264) 	credit = flex_gd->count * 4 + reserved_gdb;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1265) 	handle = ext4_journal_start_sb(sb, credit);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1266) 	if (IS_ERR(handle)) {
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1267) 		err = PTR_ERR(handle);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1268) 		goto exit;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1269) 	}
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1270) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1271) 	err = ext4_journal_get_write_access(handle, sbi->s_sbh);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1272) 	if (err)
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1273) 		goto exit_journal;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1274) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1275) 	group = flex_gd->groups[0].group;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1276) 	BUG_ON(group != EXT4_SB(sb)->s_groups_count);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1277) 	err = ext4_add_new_descs(handle, sb, group,
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1278) 				resize_inode, flex_gd->count);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1279) 	if (err)
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1280) 		goto exit_journal;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1281) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1282) 	err = ext4_setup_new_descs(handle, sb, flex_gd);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1283) 	if (err)
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1284) 		goto exit_journal;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1285) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1286) 	ext4_update_super(sb, flex_gd);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1287) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1288) 	err = ext4_handle_dirty_super(handle, sb);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1289) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1290) exit_journal:
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1291) 	err2 = ext4_journal_stop(handle);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1292) 	if (!err)
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1293) 		err = err2;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1294) 
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1295) 	if (!err) {
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1296) 		int i;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1297) 		update_backups(sb, sbi->s_sbh->b_blocknr, (char *)es,
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1298) 			       sizeof(struct ext4_super_block));
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1299) 		for (i = 0; i < flex_gd->count; i++, group++) {
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1300) 			struct buffer_head *gdb_bh;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1301) 			int gdb_num;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1302) 			gdb_num = group / EXT4_BLOCKS_PER_GROUP(sb);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1303) 			gdb_bh = sbi->s_group_desc[gdb_num];
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1304) 			update_backups(sb, gdb_bh->b_blocknr, gdb_bh->b_data,
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1305) 				       gdb_bh->b_size);
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1306) 		}
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1307) 	}
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1308) exit:
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1309) 	return err;
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1310) }
4bac1f8cef7b (Yongqiang Yang    2012-01-03 23:44:38 -0500 1311) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1312) static int ext4_setup_next_flex_gd(struct super_block *sb,
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1313) 				    struct ext4_new_flex_group_data *flex_gd,
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1314) 				    ext4_fsblk_t n_blocks_count,
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1315) 				    unsigned long flexbg_size)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1316) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1317) 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1318) 	struct ext4_new_group_data *group_data = flex_gd->groups;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1319) 	ext4_fsblk_t o_blocks_count;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1320) 	ext4_group_t n_group;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1321) 	ext4_group_t group;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1322) 	ext4_group_t last_group;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1323) 	ext4_grpblk_t last;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1324) 	ext4_grpblk_t blocks_per_group;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1325) 	unsigned long i;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1326) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1327) 	blocks_per_group = EXT4_BLOCKS_PER_GROUP(sb);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1328) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1329) 	o_blocks_count = ext4_blocks_count(es);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1330) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1331) 	if (o_blocks_count == n_blocks_count)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1332) 		return 0;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1333) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1334) 	ext4_get_group_no_and_offset(sb, o_blocks_count, &group, &last);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1335) 	BUG_ON(last);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1336) 	ext4_get_group_no_and_offset(sb, n_blocks_count - 1, &n_group, &last);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1337) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1338) 	last_group = group | (flexbg_size - 1);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1339) 	if (last_group > n_group)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1340) 		last_group = n_group;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1341) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1342) 	flex_gd->count = last_group - group + 1;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1343) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1344) 	for (i = 0; i < flex_gd->count; i++) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1345) 		int overhead;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1346) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1347) 		group_data[i].group = group + i;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1348) 		group_data[i].blocks_count = blocks_per_group;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1349) 		overhead = ext4_bg_has_super(sb, group + i) ?
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1350) 			   (1 + ext4_bg_num_gdb(sb, group + i) +
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1351) 			    le16_to_cpu(es->s_reserved_gdt_blocks)) : 0;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1352) 		group_data[i].free_blocks_count = blocks_per_group - overhead;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1353) 		if (EXT4_HAS_RO_COMPAT_FEATURE(sb,
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1354) 					       EXT4_FEATURE_RO_COMPAT_GDT_CSUM))
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1355) 			flex_gd->bg_flags[i] = EXT4_BG_BLOCK_UNINIT |
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1356) 					       EXT4_BG_INODE_UNINIT;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1357) 		else
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1358) 			flex_gd->bg_flags[i] = EXT4_BG_INODE_ZEROED;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1359) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1360) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1361) 	if (last_group == n_group &&
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1362) 	    EXT4_HAS_RO_COMPAT_FEATURE(sb,
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1363) 				       EXT4_FEATURE_RO_COMPAT_GDT_CSUM))
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1364) 		/* We need to initialize block bitmap of last group. */
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1365) 		flex_gd->bg_flags[i - 1] &= ~EXT4_BG_BLOCK_UNINIT;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1366) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1367) 	if ((last_group == n_group) && (last != blocks_per_group - 1)) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1368) 		group_data[i - 1].blocks_count = last + 1;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1369) 		group_data[i - 1].free_blocks_count -= blocks_per_group-
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1370) 					last - 1;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1371) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1372) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1373) 	return 1;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1374) }
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1375) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1376) /* Add group descriptor data to an existing or new group descriptor block.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1377)  * Ensure we handle all possible error conditions _before_ we start modifying
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1378)  * the filesystem, because we cannot abort the transaction and not have it
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1379)  * write the data to disk.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1380)  *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1381)  * If we are on a GDT block boundary, we need to get the reserved GDT block.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1382)  * Otherwise, we may need to add backup GDT blocks for a sparse group.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1383)  *
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1384)  * We only need to hold the superblock lock while we are actually adding
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1385)  * in the new group's counts to the superblock.  Prior to that we have
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1386)  * not really "added" the group at all.  We re-check that we are still
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1387)  * adding in the last group in case things have changed since verifying.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1388)  */
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1389) int ext4_group_add(struct super_block *sb, struct ext4_new_group_data *input)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1390) {
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1391) 	struct ext4_new_flex_group_data flex_gd;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1392) 	struct ext4_sb_info *sbi = EXT4_SB(sb);
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1393) 	struct ext4_super_block *es = sbi->s_es;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1394) 	int reserved_gdb = ext4_bg_has_super(sb, input->group) ?
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1395) 		le16_to_cpu(es->s_reserved_gdt_blocks) : 0;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1396) 	struct inode *inode = NULL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1397) 	int gdb_off, gdb_num;
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1398) 	int err;
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1399) 	__u16 bg_flags = 0;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1400) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1401) 	gdb_num = input->group / EXT4_DESC_PER_BLOCK(sb);
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1402) 	gdb_off = input->group % EXT4_DESC_PER_BLOCK(sb);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1403) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1404) 	if (gdb_off == 0 && !EXT4_HAS_RO_COMPAT_FEATURE(sb,
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1405) 					EXT4_FEATURE_RO_COMPAT_SPARSE_SUPER)) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1406) 		ext4_warning(sb, "Can't resize non-sparse filesystem further");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1407) 		return -EPERM;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1408) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1409) 
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700 1410) 	if (ext4_blocks_count(es) + input->blocks_count <
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700 1411) 	    ext4_blocks_count(es)) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1412) 		ext4_warning(sb, "blocks_count overflow");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1413) 		return -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1414) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1415) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1416) 	if (le32_to_cpu(es->s_inodes_count) + EXT4_INODES_PER_GROUP(sb) <
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1417) 	    le32_to_cpu(es->s_inodes_count)) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1418) 		ext4_warning(sb, "inodes_count overflow");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1419) 		return -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1420) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1421) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1422) 	if (reserved_gdb || gdb_off == 0) {
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1423) 		if (!EXT4_HAS_COMPAT_FEATURE(sb,
37609fd5ae62 (Josef Bacik       2008-08-19 22:13:41 -0400 1424) 					     EXT4_FEATURE_COMPAT_RESIZE_INODE)
37609fd5ae62 (Josef Bacik       2008-08-19 22:13:41 -0400 1425) 		    || !le16_to_cpu(es->s_reserved_gdt_blocks)) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1426) 			ext4_warning(sb,
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1427) 				     "No reserved GDT blocks, can't resize");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1428) 			return -EPERM;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1429) 		}
1d1fe1ee02b9 (David Howells     2008-02-07 00:15:37 -0800 1430) 		inode = ext4_iget(sb, EXT4_RESIZE_INO);
1d1fe1ee02b9 (David Howells     2008-02-07 00:15:37 -0800 1431) 		if (IS_ERR(inode)) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1432) 			ext4_warning(sb, "Error opening resize inode");
1d1fe1ee02b9 (David Howells     2008-02-07 00:15:37 -0800 1433) 			return PTR_ERR(inode);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1434) 		}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1435) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1436) 
920313a726e0 (Aneesh Kumar K.V  2009-01-05 21:36:19 -0500 1437) 
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1438) 	err = verify_group_input(sb, input);
08c3a8133810 (Aneesh Kumar K.V  2009-09-09 23:50:17 -0400 1439) 	if (err)
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1440) 		goto out;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1441) 
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1442) 	flex_gd.count = 1;
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1443) 	flex_gd.groups = input;
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1444) 	flex_gd.bg_flags = &bg_flags;
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1445) 	err = ext4_flex_group_add(sb, inode, &flex_gd);
61f296cc4975 (Yongqiang Yang    2012-01-04 17:09:50 -0500 1446) out:
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1447) 	iput(inode);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1448) 	return err;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1449) } /* ext4_group_add */
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1450) 
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1451) /*
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1452)  * extend a group without checking assuming that checking has been done.
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1453)  */
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1454) static int ext4_group_extend_no_check(struct super_block *sb,
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1455) 				      ext4_fsblk_t o_blocks_count, ext4_grpblk_t add)
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1456) {
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1457) 	struct ext4_super_block *es = EXT4_SB(sb)->s_es;
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1458) 	handle_t *handle;
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1459) 	int err = 0, err2;
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1460) 
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1461) 	/* We will update the superblock, one block bitmap, and
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1462) 	 * one group descriptor via ext4_group_add_blocks().
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1463) 	 */
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1464) 	handle = ext4_journal_start_sb(sb, 3);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1465) 	if (IS_ERR(handle)) {
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1466) 		err = PTR_ERR(handle);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1467) 		ext4_warning(sb, "error %d on journal start", err);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1468) 		return err;
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1469) 	}
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1470) 
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1471) 	err = ext4_journal_get_write_access(handle, EXT4_SB(sb)->s_sbh);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1472) 	if (err) {
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1473) 		ext4_warning(sb, "error %d on journal write access", err);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1474) 		goto errout;
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1475) 	}
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1476) 
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1477) 	ext4_blocks_count_set(es, o_blocks_count + add);
636d7e2e3b57 (Darrick J. Wong   2012-03-20 15:46:11 -0400 1478) 	ext4_free_blocks_count_set(es, ext4_free_blocks_count(es) + add);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1479) 	ext4_debug("freeing blocks %llu through %llu\n", o_blocks_count,
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1480) 		   o_blocks_count + add);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1481) 	/* We add the blocks to the bitmap and set the group need init bit */
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1482) 	err = ext4_group_add_blocks(handle, sb, o_blocks_count, add);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1483) 	if (err)
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1484) 		goto errout;
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1485) 	ext4_handle_dirty_super(handle, sb);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1486) 	ext4_debug("freed blocks %llu through %llu\n", o_blocks_count,
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1487) 		   o_blocks_count + add);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1488) errout:
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1489) 	err2 = ext4_journal_stop(handle);
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1490) 	if (err2 && !err)
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1491) 		err = err2;
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1492) 
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1493) 	if (!err) {
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1494) 		if (test_opt(sb, DEBUG))
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1495) 			printk(KERN_DEBUG "EXT4-fs: extended group to %llu "
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1496) 			       "blocks\n", ext4_blocks_count(es));
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1497) 		update_backups(sb, EXT4_SB(sb)->s_sbh->b_blocknr, (char *)es,
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1498) 			       sizeof(struct ext4_super_block));
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1499) 	}
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1500) 	return err;
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1501) }
18e3143848f1 (Yongqiang Yang    2012-01-03 23:18:50 -0500 1502) 
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400 1503) /*
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400 1504)  * Extend the filesystem to the new number of blocks specified.  This entry
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1505)  * point is only used to extend the current filesystem to the end of the last
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1506)  * existing group.  It can be accessed via ioctl, or by "remount,resize=<size>"
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1507)  * for emergencies (because it has no dependencies on reserved blocks).
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1508)  *
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1509)  * If we _really_ wanted, we could use default values to call ext4_group_add()
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1510)  * allow the "remount" trick to work for arbitrary resizing, assuming enough
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1511)  * GDT blocks are reserved to grow to the desired size.
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1512)  */
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1513) int ext4_group_extend(struct super_block *sb, struct ext4_super_block *es,
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1514) 		      ext4_fsblk_t n_blocks_count)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1515) {
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1516) 	ext4_fsblk_t o_blocks_count;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1517) 	ext4_grpblk_t last;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1518) 	ext4_grpblk_t add;
af5bc92dded4 (Theodore Ts'o     2008-09-08 22:25:24 -0400 1519) 	struct buffer_head *bh;
d89651c8e222 (Yongqiang Yang    2012-01-04 17:09:48 -0500 1520) 	int err;
5f21b0e642d7 (Frederic Bohe     2008-07-11 19:27:31 -0400 1521) 	ext4_group_t group;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1522) 
bd81d8eec043 (Laurent Vivier    2006-10-11 01:21:10 -0700 1523) 	o_blocks_count = ext4_blocks_count(es);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1524) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1525) 	if (test_opt(sb, DEBUG))
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1526) 		ext4_msg(sb, KERN_DEBUG,
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1527) 			 "extending last group from %llu to %llu blocks",
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1528) 			 o_blocks_count, n_blocks_count);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1529) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1530) 	if (n_blocks_count == 0 || n_blocks_count == o_blocks_count)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1531) 		return 0;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1532) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1533) 	if (n_blocks_count > (sector_t)(~0ULL) >> (sb->s_blocksize_bits - 9)) {
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1534) 		ext4_msg(sb, KERN_ERR,
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1535) 			 "filesystem too large to resize to %llu blocks safely",
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1536) 			 n_blocks_count);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1537) 		if (sizeof(sector_t) < 8)
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1538) 			ext4_warning(sb, "CONFIG_LBDAF not enabled");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1539) 		return -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1540) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1541) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1542) 	if (n_blocks_count < o_blocks_count) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1543) 		ext4_warning(sb, "can't shrink FS - resize aborted");
8f82f840ec6a (Yongqiang Yang    2011-07-26 21:35:44 -0400 1544) 		return -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1545) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1546) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1547) 	/* Handle the remaining blocks in the last group only. */
5f21b0e642d7 (Frederic Bohe     2008-07-11 19:27:31 -0400 1548) 	ext4_get_group_no_and_offset(sb, o_blocks_count, &group, &last);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1549) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1550) 	if (last == 0) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1551) 		ext4_warning(sb, "need to use ext2online to resize further");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1552) 		return -EPERM;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1553) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1554) 
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1555) 	add = EXT4_BLOCKS_PER_GROUP(sb) - last;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1556) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1557) 	if (o_blocks_count + add < o_blocks_count) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1558) 		ext4_warning(sb, "blocks_count overflow");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1559) 		return -EINVAL;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1560) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1561) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1562) 	if (o_blocks_count + add > n_blocks_count)
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1563) 		add = n_blocks_count - o_blocks_count;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1564) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1565) 	if (o_blocks_count + add < n_blocks_count)
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1566) 		ext4_warning(sb, "will only finish group (%llu blocks, %u new)",
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1567) 			     o_blocks_count + add, add);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1568) 
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1569) 	/* See if the device is actually as big as what was requested */
2b2d6d019724 (Theodore Ts'o     2008-07-26 16:15:44 -0400 1570) 	bh = sb_bread(sb, o_blocks_count + add - 1);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1571) 	if (!bh) {
12062dddda45 (Eric Sandeen      2010-02-15 14:19:27 -0500 1572) 		ext4_warning(sb, "can't read last block, resize aborted");
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1573) 		return -ENOSPC;
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1574) 	}
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1575) 	brelse(bh);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1576) 
d89651c8e222 (Yongqiang Yang    2012-01-04 17:09:48 -0500 1577) 	err = ext4_group_extend_no_check(sb, o_blocks_count, add);
ac27a0ec112a (Dave Kleikamp     2006-10-11 01:20:50 -0700 1578) 	return err;
617ba13b31fb (Mingming Cao      2006-10-11 01:20:53 -0700 1579) } /* ext4_group_extend */
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1580) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1581) /*
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1582)  * ext4_resize_fs() resizes a fs to new size specified by @n_blocks_count
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1583)  *
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1584)  * @sb: super block of the fs to be resized
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1585)  * @n_blocks_count: the number of blocks resides in the resized fs
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1586)  */
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1587) int ext4_resize_fs(struct super_block *sb, ext4_fsblk_t n_blocks_count)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1588) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1589) 	struct ext4_new_flex_group_data *flex_gd = NULL;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1590) 	struct ext4_sb_info *sbi = EXT4_SB(sb);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1591) 	struct ext4_super_block *es = sbi->s_es;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1592) 	struct buffer_head *bh;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1593) 	struct inode *resize_inode;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1594) 	ext4_fsblk_t o_blocks_count;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1595) 	ext4_group_t o_group;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1596) 	ext4_group_t n_group;
a0ade1deb86d (Lukas Czerner     2012-02-20 23:02:06 -0500 1597) 	ext4_grpblk_t offset, add;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1598) 	unsigned long n_desc_blocks;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1599) 	unsigned long o_desc_blocks;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1600) 	unsigned long desc_blocks;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1601) 	int err = 0, flexbg_size = 1;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1602) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1603) 	o_blocks_count = ext4_blocks_count(es);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1604) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1605) 	if (test_opt(sb, DEBUG))
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1606) 		ext4_msg(sb, KERN_DEBUG, "resizing filesystem from %llu "
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1607) 		       "to %llu blocks", o_blocks_count, n_blocks_count);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1608) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1609) 	if (n_blocks_count < o_blocks_count) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1610) 		/* On-line shrinking not supported */
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1611) 		ext4_warning(sb, "can't shrink FS - resize aborted");
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1612) 		return -EINVAL;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1613) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1614) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1615) 	if (n_blocks_count == o_blocks_count)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1616) 		/* Nothing need to do */
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1617) 		return 0;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1618) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1619) 	ext4_get_group_no_and_offset(sb, n_blocks_count - 1, &n_group, &offset);
a0ade1deb86d (Lukas Czerner     2012-02-20 23:02:06 -0500 1620) 	ext4_get_group_no_and_offset(sb, o_blocks_count - 1, &o_group, &offset);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1621) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1622) 	n_desc_blocks = (n_group + EXT4_DESC_PER_BLOCK(sb)) /
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1623) 			EXT4_DESC_PER_BLOCK(sb);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1624) 	o_desc_blocks = (sbi->s_groups_count + EXT4_DESC_PER_BLOCK(sb) - 1) /
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1625) 			EXT4_DESC_PER_BLOCK(sb);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1626) 	desc_blocks = n_desc_blocks - o_desc_blocks;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1627) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1628) 	if (desc_blocks &&
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1629) 	    (!EXT4_HAS_COMPAT_FEATURE(sb, EXT4_FEATURE_COMPAT_RESIZE_INODE) ||
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1630) 	     le16_to_cpu(es->s_reserved_gdt_blocks) < desc_blocks)) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1631) 		ext4_warning(sb, "No reserved GDT blocks, can't resize");
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1632) 		return -EPERM;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1633) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1634) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1635) 	resize_inode = ext4_iget(sb, EXT4_RESIZE_INO);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1636) 	if (IS_ERR(resize_inode)) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1637) 		ext4_warning(sb, "Error opening resize inode");
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1638) 		return PTR_ERR(resize_inode);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1639) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1640) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1641) 	/* See if the device is actually as big as what was requested */
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1642) 	bh = sb_bread(sb, n_blocks_count - 1);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1643) 	if (!bh) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1644) 		ext4_warning(sb, "can't read last block, resize aborted");
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1645) 		return -ENOSPC;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1646) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1647) 	brelse(bh);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1648) 
a0ade1deb86d (Lukas Czerner     2012-02-20 23:02:06 -0500 1649) 	/* extend the last group */
a0ade1deb86d (Lukas Czerner     2012-02-20 23:02:06 -0500 1650) 	if (n_group == o_group)
a0ade1deb86d (Lukas Czerner     2012-02-20 23:02:06 -0500 1651) 		add = n_blocks_count - o_blocks_count;
a0ade1deb86d (Lukas Czerner     2012-02-20 23:02:06 -0500 1652) 	else
a0ade1deb86d (Lukas Czerner     2012-02-20 23:02:06 -0500 1653) 		add = EXT4_BLOCKS_PER_GROUP(sb) - (offset + 1);
a0ade1deb86d (Lukas Czerner     2012-02-20 23:02:06 -0500 1654) 	if (add > 0) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1655) 		err = ext4_group_extend_no_check(sb, o_blocks_count, add);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1656) 		if (err)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1657) 			goto out;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1658) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1659) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1660) 	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_FLEX_BG) &&
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1661) 	    es->s_log_groups_per_flex)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1662) 		flexbg_size = 1 << es->s_log_groups_per_flex;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1663) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1664) 	o_blocks_count = ext4_blocks_count(es);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1665) 	if (o_blocks_count == n_blocks_count)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1666) 		goto out;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1667) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1668) 	flex_gd = alloc_flex_gd(flexbg_size);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1669) 	if (flex_gd == NULL) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1670) 		err = -ENOMEM;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1671) 		goto out;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1672) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1673) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1674) 	/* Add flex groups. Note that a regular group is a
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1675) 	 * flex group with 1 group.
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1676) 	 */
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1677) 	while (ext4_setup_next_flex_gd(sb, flex_gd, n_blocks_count,
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1678) 					      flexbg_size)) {
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1679) 		ext4_alloc_group_tables(sb, flex_gd, flexbg_size);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1680) 		err = ext4_flex_group_add(sb, resize_inode, flex_gd);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1681) 		if (unlikely(err))
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1682) 			break;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1683) 	}
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1684) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1685) out:
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1686) 	if (flex_gd)
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1687) 		free_flex_gd(flex_gd);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1688) 
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1689) 	iput(resize_inode);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1690) 	if (test_opt(sb, DEBUG))
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1691) 		ext4_msg(sb, KERN_DEBUG, "resized filesystem from %llu "
92b9781658db (Theodore Ts'o     2012-03-19 23:41:49 -0400 1692) 		       "upto %llu blocks", o_blocks_count, n_blocks_count);
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1693) 	return err;
19c5246d2516 (Yongqiang Yang    2012-01-04 17:09:44 -0500 1694) }
